<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
spd = 1 //laag = hoog
pop_size = 32 //even div2
mut_chance = 1 //laag
elitism = 6 //AAAAA div2

global.weight_const = 36
gen = 0
idd = 0
best_fitness = 0
tot_food = 0
tot_mut = 0
avg_fitness = 0
avg_fitness_10 = 0
pre_avg_fitness = 0
pre_avg_fitness_10 = 0

//create ais
randomize()
for (j = 0; j &lt; pop_size; j++) {
    for (k = 0; k &lt; global.weight_const; k++) {
        DNA[j, k] = random_weight()
    }
}

//spawn food
do {
    xx = irandom(room_width-1)
    yy = irandom(room_height-6)
} until (!position_meeting(xx, yy, obj_head) &amp;&amp; !position_meeting(xx, yy, obj_body))
instance_create(xx, yy, obj_food)

//spawns
//instance_create(6,29,obj_player)
create_snake()
//instance_create(25,3,obj_head)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn food
do {
    xx = irandom(room_width-1)
    yy = irandom(room_height-1)
} until (!position_meeting(xx, yy, obj_head) &amp;&amp; !position_meeting(xx, yy, obj_body))
instance_create(xx, yy, obj_food)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase/decrease speed
if keyboard_check_pressed(ord("P")) { spd+=10 }
if keyboard_check_pressed(ord("O")) { spd-- }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw stats
yy = 4
draw_set_colour(c_white)
draw_set_font(fnt_debug)
draw_text(4,yy,"Generation = "+string(gen)) yy+=16
if instance_exists(obj_head) {
    draw_text(4,yy,"Sim Speed = "+string(obj_controller.spd)) yy+=32
    draw_text(4,yy,"Best Fitness = "+string(obj_controller.best_fitness)) yy+=16
    draw_text(4,yy,"Average Fitness = "+string(obj_controller.avg_fitness)) yy+=16
    draw_text(4,yy,"Average Fitness (10Gen) = "+string(obj_controller.avg_fitness_10)) yy+=16
    draw_text(4,yy,"Total Food Eaten = "+string(obj_controller.tot_food)) yy+=16
    draw_text(4,yy,"Total Mutations = "+string(obj_controller.tot_mut)) yy+=32 
    draw_text(4,yy,"AI id = "+string(obj_head.idd+1)) yy+=16
    draw_text(4,yy,"Fitness = "+string(obj_head.fitness)) yy+=16
    draw_text(4,yy,"Lifeforce = "+string(obj_head.lifeforce)) yy+=32
    draw_text(4,yy,"I[0] = "+string(obj_head.i[0])+" (delta x food)") yy+=16
    draw_text(4,yy,"I[1] = "+string(obj_head.i[1])+" (delta y food)") yy+=16
    draw_text(4,yy,"O[0] = "+string(obj_head.o[0])+" (right)") yy+=16
    draw_text(4,yy,"O[1] = "+string(obj_head.o[1])+" (up)") yy+=16
    draw_text(4,yy,"O[2] = "+string(obj_head.o[2])+" (left)") yy+=16
    draw_text(4,yy,"O[3] = "+string(obj_head.o[3])+" (down)") yy+=16
    switch(obj_head.dir){
        case 0: draw_text(4,yy,"Decision: RIGHT") yy+=16 break
        case 1: draw_text(4,yy,"Decision: UP") yy+=16 break
        case 2: draw_text(4,yy,"Decision: LEFT") yy+=16 break
        case 3: draw_text(4,yy,"Decision: DOWN") yy+=16 break
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
