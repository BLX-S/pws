<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_snake_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = 0
image_index = 1

lifeforce = 500
lf = false
idd = obj_controller.idd
length = 4
spd = obj_controller.spd
alarm[0] = spd

if x &gt; 16 begindir = 2
else if x &lt; 16 begindir = 0
dir = begindir
prev_dir = dir

if dir = 0 a = instance_create(x-1, y, obj_body)
else if dir = 2 a = instance_create(x+1, y, obj_body)
a.idd = 0
a.parent = obj_head
a.alarm[0] = 1

//food
with obj_food instance_destroy()
do {
    xx = irandom(room_width-1)
    yy = irandom(room_height-8)
} until (!position_meeting(xx, yy, obj_head) &amp;&amp; !position_meeting(xx, yy, obj_body))
instance_create(xx, yy, obj_food)

//AI
fitness = 1
i[0] = 0 i[1] = 0 i[2] = 0 i[3] = 0 i[4] = 0 i[5] = 0
o[0] = 0 o[1] = 0 o[2] = 0 o[3] = 0
for (j = 0; j &lt; global.weight_const; j++) {
    w[j] = obj_controller.DNA[idd, j]
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI
lifeforce--
//fitness+=1/(sqrt(sqr(obj_food.x-x)+sqr(obj_food.y-y)))

//Get inputs
diffx = 0.5+obj_food.x-x
diffy = 0.5+obj_food.y-y
if diffx = 0 diffx = 0.001
if diffy = 0 diffy = 0.001
i[0] = 32/diffx
i[1] = 32/diffy

/*
i[2] = scan_line(0)
i[3] = scan_line(1)
i[4] = scan_line(2)
i[5] = scan_line(3)

switch(prev_dir){

    case 0:
    i[2] = scan_line(3)
    i[3] = scan_line(0)
    i[4] = scan_line(1)
    i[5] = scan_line(2)
    break
    
    case 1:
    i[2] = scan_line(0)
    i[3] = scan_line(1)
    i[4] = scan_line(2)
    i[5] = scan_line(3)
    break
    
    case 2:
    i[2] = scan_line(1)
    i[3] = scan_line(2)
    i[4] = scan_line(3)
    i[5] = scan_line(0)
    break
    
    case 3:
    i[2] = scan_line(2)
    i[3] = scan_line(3)
    i[4] = scan_line(0)
    i[5] = scan_line(1)
    break

}*/

//show_debug_message("")
//show_debug_message("=============================================================================================")
//show_debug_message("i[0] = "+string(i[0])+"; i[1] = "+string(i[1])+"; i[2] = "+string(i[2])+"; i[3] = "+string(i[3])+"; i[4] = "+string(i[4]))

//process

h[0] = (i[0]*w[0]+i[1]*w[6]+1)/3
h[1] = (i[0]*w[1]+i[1]*w[7]+1)/3
h[2] = (i[0]*w[2]+i[1]*w[8]+1)/3
h[3] = (i[0]*w[3]+i[1]*w[9]+1)/3
h[4] = (i[0]*w[4]+i[1]*w[10]+1)/3
h[5] = (i[0]*w[5]+i[1]*w[11]+1)/3
/*
h[0] = (i[0]*w[0]+i[1]*w[8]+i[2]*w[16]+i[3]*w[24]+i[4]*w[32]+i[5]*w[40]+1)/7
h[1] = (i[0]*w[1]+i[1]*w[9]+i[2]*w[17]+i[3]*w[25]+i[4]*w[33]+i[5]*w[41]+1)/7
h[2] = (i[0]*w[2]+i[1]*w[10]+i[2]*w[18]+i[3]*w[26]+i[4]*w[34]+i[5]*w[42]+1)/7
h[3] = (i[0]*w[3]+i[1]*w[11]+i[2]*w[19]+i[3]*w[27]+i[4]*w[35]+i[5]*w[43]+1)/7
h[4] = (i[0]*w[4]+i[1]*w[12]+i[2]*w[20]+i[3]*w[28]+i[4]*w[36]+i[5]*w[44]+1)/7
h[5] = (i[0]*w[5]+i[1]*w[13]+i[2]*w[21]+i[3]*w[29]+i[4]*w[37]+i[5]*w[45]+1)/7
h[6] = (i[0]*w[6]+i[1]*w[14]+i[2]*w[22]+i[3]*w[30]+i[4]*w[38]+i[5]*w[46]+1)/7
h[7] = (i[0]*w[7]+i[1]*w[15]+i[2]*w[23]+i[3]*w[31]+i[4]*w[39]+i[5]*w[47]+1)/7*/

//show_debug_message("h[0] = "+string(h[0])+"; h[1] = "+string(h[1])+"; h[2] = "+string(h[2])+"; h[3] = "+string(h[3])+"; h[4] = "+string(h[4])+"; h[5] = "+string(h[5])+";hi[6] = "+string(h[6])+"; h[7] = "+string(h[7]))

for (j = 0; j &lt; 6; j++){//8
    h[j] = 1/(1+exp(-h[j]))
}

//show_debug_message("h[0] = "+string(h[0])+"; h[1] = "+string(h[1])+"; h[2] = "+string(h[2])+"; h[3] = "+string(h[3])+"; h[4] = "+string(h[4])+"; h[5] = "+string(h[5])+";hi[6] = "+string(h[6])+"; h[7] = "+string(h[7]))

//for (j = 8; j &lt; 8; j++){
//    h[j] = 1/(1+exp(-h[j]))
//}

//show_debug_message("h[8] = "+string(h[8])+"; h[9] = "+string(h[9])+"; h[10] = "+string(h[10])+"; h[11] = "+string(h[11])+"; h[12] = "+string(h[12])+"; h[13] = "+string(h[13])+";hi[14] = "+string(h[14])+"; h[15] = "+string(h[15]))

o[0] = (h[0]*w[12]+h[1]*w[13]+h[2]*w[14]+h[3]*w[15]+h[4]*w[16]+h[5]*w[17]+1)/7
o[1] = (h[0]*w[18]+h[1]*w[19]+h[2]*w[20]+h[3]*w[21]+h[4]*w[22]+h[5]*w[23]+1)/7
o[2] = (h[0]*w[24]+h[1]*w[25]+h[2]*w[26]+h[3]*w[27]+h[4]*w[28]+h[5]*w[29]+1)/7
o[3] = (h[0]*w[30]+h[1]*w[31]+h[2]*w[32]+h[3]*w[33]+h[4]*w[34]+h[5]*w[35]+1)/7
//o[0] = (h[0]*w[48]+h[1]*w[49]+h[2]*w[50]+h[3]*w[51]+h[4]*w[52]+h[5]*w[53]+h[6]*w[54]+h[7]*w[55]+1)/9

//o[1] = (h[0]*w[105]+h[1]*w[108]+h[2]*w[111]+h[3]*w[114]+h[4]*w[117]+h[5]*w[120]+h[6]*w[123]+h[7]*w[126]+1)/9
//o[2] = (h[0]*w[106]+h[1]*w[109]+h[2]*w[112]+h[3]*w[115]+h[4]*w[118]+h[5]*w[121]+h[6]*w[124]+h[7]*w[127]+1)/9

for (j = 0; j &lt; 4; j++){
    o[j] = 1/(1+exp(-o[j]))
}

//show_debug_message("o[0] = "+string(o[0])+"; o[1] = "+string(o[1])+"; o[2] = "+string(o[2]))
//show_debug_message("=============================================================================================")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move

//if o[0] &gt; o[1] &amp;&amp; o[0] &gt; o[2] { if dir &lt; 3 dir++ else dir = 0 }
//else if o[1] &gt; o[0] &amp;&amp; o[1] &gt; o[2] { if dir &gt; 0 dir++ else dir = 3 }
//show_debug_message("o[0] = "+string(o[0]))

/*dForward = 0.045
if o[0] &lt; 0.5 + dForward &amp;&amp; o[0] &gt; 0.5 - dForward {}
else if o[0] &gt; 0.5 { if dir &lt; 3 dir++ else dir = 0 }
else if o[0] &lt; 0.5 { if dir &gt; 0 dir++ else dir = 3 }
*/
if o[0] &gt; o[1] &amp;&amp; o[0] &gt; o[2] &amp;&amp; o[0] &gt; o[3] dir = 0
if o[1] &gt; o[0] &amp;&amp; o[1] &gt; o[2] &amp;&amp; o[1] &gt; o[3] dir = 1
if o[2] &gt; o[1] &amp;&amp; o[2] &gt; o[0] &amp;&amp; o[2] &gt; o[3] dir = 2
if o[3] &gt; o[1] &amp;&amp; o[3] &gt; o[2] &amp;&amp; o[3] &gt; o[0] dir = 3

switch(dir) {
    case 0: { if !position_meeting(x+1,y,obj_body) { x++ prev_dir = dir } } break
    case 1: { if !position_meeting(x,y-1,obj_body) { y-- prev_dir = dir } } break
    case 2: { if !position_meeting(x-1,y,obj_body) { x-- prev_dir = dir } } break
    case 3: { if !position_meeting(x,y+1,obj_body) { y++ prev_dir = dir } } break
}
alarm[0] = spd

for (j = 0; j &lt; length+1; j++){
    with obj_body {
        if idd = obj_head.j {
            dir = parent.prev_dir
            switch(dir) {
                case 0: x++ break
                case 1: y-- break
                case 2: x-- break
                case 3: y++ break
            }
        }
    }
}
for (j = 0; j &lt; length+1; j++){
    with obj_body {
        if idd = obj_head.j {
            prev_dir = dir
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check collision

if lifeforce &lt;= 0 lf = true
if /*position_meeting(x, y, obj_body) ||*/ x &lt; 0 || x &gt; 31 || y &lt; 0 || y &gt; 31 || lf {

    //debug
    if position_meeting(x, y, obj_body) {
        show_debug_message("DIED BECAUSE OF HITTING ITSELF")
        show_debug_message("dir = "+string(dir)+", prevdir = "+string(prev_dir))
        show_message("ey is that your iq or your age ey")
    }
    if x &lt; 0 || x &gt; 31 || y &lt; 0 || y &gt; 31 show_debug_message("DIED BECAUSE OF WALLS")
    if lf show_debug_message("DIED BECAUSE RAN OUT OF LIFE")
    //--debug

    obj_controller.idd++
    obj_controller.fitness[idd] = fitness
    obj_controller.pre_avg_fitness += fitness
    
    if !lf { with other obj_controller.fitness[idd] = fitness }
    with obj_body instance_destroy()
    if idd &lt; obj_controller.pop_size-1 {
        create_snake()
    } else {
    
        //Stats
        obj_controller.avg_fitness = obj_controller.pre_avg_fitness/32
        obj_controller.pre_avg_fitness_10 += obj_controller.avg_fitness
        if obj_controller.gen/10 = round(obj_controller.gen/10){
            obj_controller.avg_fitness_10 = obj_controller.pre_avg_fitness_10/10
            obj_controller.pre_avg_fitness_10 = 0
        }
        obj_controller.pre_avg_fitness = 0
        //--Stats
        
        //Sort list
        for (j = 0; j&lt;obj_controller.pop_size;j++){
            show_debug_message("fitness["+string(j)+"] = "+string(obj_controller.fitness[j]))
        }
        obj_controller.best[0] = -1
        for (j = 0; j&lt;obj_controller.pop_size;j++){
            var selec = -1
            for (k = 0; k&lt;obj_controller.pop_size;k++){
                if selec = -1 {
                    if obj_controller.fitness[k] &gt; 0 &amp;&amp; check_list(k) = false selec = k
                } else {
                    if obj_controller.fitness[k] &gt; obj_controller.fitness[selec] &amp;&amp; check_list(k) = false selec = k
                }
            }
            obj_controller.best[j] = selec            
        }
        obj_controller.best_fitness = obj_controller.fitness[obj_controller.best[0]]
        for (j = 0; j&lt;obj_controller.pop_size;j++){
            show_debug_message("best["+string(j)+"] = "+string(obj_controller.best[j])+" with fitness = "+string(obj_controller.fitness[obj_controller.best[j]]))
        }
        //--Sort list
        
        //Selection + Crossover 
        //elitism
        for (j = 0; j&lt;obj_controller.elitism; j++) {
            for (k = 0; k&lt;global.weight_const; k++) {
                obj_controller.DNA2[j, k] = obj_controller.DNA[obj_controller.best[j], k]
            }
        }
        children = obj_controller.elitism
        
        //mating
        randomize()
        for (j = 0; j&lt;(obj_controller.pop_size-obj_controller.elitism)/2; j++){
        
            //selection
            mate1 = obj_controller.best[j*2]
            mate2 = obj_controller.best[j*2+1]
            
            //crossover
            child = j*2+obj_controller.elitism
            repeat(2) {
                crossover = irandom_range(1, global.weight_const-1)
                for (k = 0; k&lt;crossover; k++){
                    obj_controller.DNA2[child, k] = obj_controller.DNA[mate1, k]
                }
                for (k = crossover; k&lt;global.weight_const; k++){
                    obj_controller.DNA2[child, k] = obj_controller.DNA[mate2, k]
                }
                
                if random(100) &lt; obj_controller.mut_chance { //mutation
                    pick = irandom(global.weight_const)
                    obj_controller.DNA2[child, pick] = random_weight()
                    obj_controller.tot_mut++
                }
                child++
            }
 
        }
        //--Selection + Crossover
        
        //Replace old DNA
        for (j = 0; j&lt;obj_controller.pop_size; j++) {
            show_debug_message("OLD_DNA["+string(j)+"] = ("+string(obj_controller.DNA[j, 0])+"|"+string(obj_controller.DNA[j, 1])+"|"+string(obj_controller.DNA[j, 2])+"|"+string(obj_controller.DNA[j, 3])+"|"+string(obj_controller.DNA[j, 4])+"|"+string(obj_controller.DNA[j, 5])+"|"+string(obj_controller.DNA[j, 6])+"|"+string(obj_controller.DNA[j, 7])+"|"+string(obj_controller.DNA[j, 8])+"|"+string(obj_controller.DNA[j, 9])+"|"+string(obj_controller.DNA[j, 10])+"|"+string(obj_controller.DNA[j, 11])+")")
            for (k = 0; k&lt;global.weight_const; k++) {
                obj_controller.DNA[j, k] = obj_controller.DNA2[j, k]
            }
            show_debug_message("NEW_DNA["+string(j)+"] = ("+string(obj_controller.DNA[j, 0])+"|"+string(obj_controller.DNA[j, 1])+"|"+string(obj_controller.DNA[j, 2])+"|"+string(obj_controller.DNA[j, 3])+"|"+string(obj_controller.DNA[j, 4])+"|"+string(obj_controller.DNA[j, 5])+"|"+string(obj_controller.DNA[j, 6])+"|"+string(obj_controller.DNA[j, 7])+"|"+string(obj_controller.DNA[j, 8])+"|"+string(obj_controller.DNA[j, 9])+"|"+string(obj_controller.DNA[j, 10])+"|"+string(obj_controller.DNA[j, 11])+")")
        }
        
        //Reset
        for (j = 0; j &lt; obj_controller.pop_size; j++){
            obj_controller.best[j] = -1
            obj_controller.fitness[j] = 0
        }
        obj_controller.gen++
        obj_controller.idd = 0
        create_snake()
        
    }
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
